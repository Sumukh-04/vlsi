Prog 1: Program to interface LED with Arduino and write a program to ‘turn ON’ LED for 1 sec after every 2 seconds

void setup()
{pinMode(2,OUTPUT);}
void loop()
{ digitalWrite(2,HIGH);
  delay(1000);
  digitalWrite(2,LOW);
  delay(2000);}

Prog 2: Program to interface the Push Button sensor with Arduino and write a program to ‘turn ON’ LED when a push button is pressed or at sensor detection

void setup()
{ 
  pinMode(18,OUTPUT);
  pinMode(35,INPUT); }
void loop()
{ int val= digitalRead(35);
  if(val==HIGH)
{digitalWrite(18,HIGH);}
  else
{digitalWrite(18,LOW);}  }
 

Prog 3: DHT11 sensor to pin 32 and display on Serial Monitor

#include <DHT.h>
#define DHTPIN 32
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
void setup() 
{
  Serial.begin(115200);
  dht.begin();
}
void loop() 
{
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println(" C");
  Serial.print("Relative Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");
  delay(2000);
}


Prog 4: DHT sensor + OLED

#include <Arduino.h>
#include <U8x8lib.h>
#include <DHT.h>
#define DHTPIN 32
#define DHTTYPE DHT11
U8X8_SH1106_128X64_NONAME_HW_I2C u8x8(U8X8_PIN_NONE);
DHT dht(DHTPIN, DHTTYPE);
void setup()
{
  u8x8.begin();
  u8x8.setPowerSave(0);
  u8x8.setFont(u8x8_font_chroma48medium8_r);
  dht.begin();
}
void loop() 
{
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  u8x8.setCursor(0, 1);
  u8x8.print("Temp: ");
  u8x8.print(temperature);
  u8x8.print(" C");
  u8x8.setCursor(0, 3);
  u8x8.print("Hum:  ");
  u8x8.print(humidity);
  u8x8.print(" %");
  delay(2000);
}

Prog 5: Push Button + Motor 

void setup()
{ 
   pinMode(13,OUTPUT); 
   pinMode(35,INPUT);   
}
void loop()
{
  if(digitalRead(35)) 
{ 
    digitalWrite(13,HIGH); 
}
  else
{ 
    digitalWrite(13,LOW); } 
}

Prog 6) Upload and retrieve DHT11 sensor data to and from ThingsSpeak Cloud

#include <WiFi.h>
#include <DHT.h>
#include "ThingSpeak.h"

#define DHTPIN 32
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

const char* ssid = "IOT 2";
const char* password = "12345678";

const char* writeAPIKey = "OFOQDDS2WG2S73ZJ";  // Write API key
const char* readAPIKey  = "OFOQDDS2WG2S73ZJ";  // Read API key

unsigned long channelID = 2875812;
unsigned int firstReadFieldNumber = 1;
unsigned int secondReadFieldNumber = 2;

WiFiClient client;

void setup() {
  Serial.begin(115200);
  dht.begin();
  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);

  Serial.print("Connecting to WiFi");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected.");
}

void loop() {
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  Serial.print("Local Temp: ");
  Serial.print(temperature);
  Serial.println(" °C");

  Serial.print("Local Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");

  ThingSpeak.setField(1, temperature);
  ThingSpeak.setField(2, humidity);

  int status = ThingSpeak.writeFields(channelID, writeAPIKey);
  if (status == 200) {
    Serial.println("Upload successful.");
  } else {
    Serial.println("Upload failed. Error code: " + String(status));
  }

  delay(15000); // wait before retrieving to ensure upload completes

  float temperatureR = ThingSpeak.readFloatField(channelID, firstReadFieldNumber, readAPIKey);
  float humidityR = ThingSpeak.readFloatField(channelID, secondReadFieldNumber, readAPIKey);

  Serial.print("Retrieved Temperature from ThingSpeak: ");
  Serial.print(temperatureR);
  Serial.println(" °C");

  Serial.print("Retrieved Humidity from ThingSpeak: ");
  Serial.print(humidityR);
  Serial.println(" %");

  delay(15000); // wait total 30 seconds between uploads
}

Prog  7) TCP

#include <WiFi.h>   // Include Wi-Fi library for ESP32
#include <DHT.h>    // Include DHT sensor library

// Wi-Fi credentials (change these to your own network)
const char* ssid = "IOT 1";
const char* password = "12345678";

// DHT11 sensor setup
#define DHT_PIN 32          // The pin where DHT11 is connected
#define DHT_TYPE DHT11      // Sensor type is DHT11
DHT dht(DHT_PIN, DHT_TYPE); // Create DHT sensor object

// Create a TCP server that listens on port 8888
WiFiServer server(8888);

void setup() {
  Serial.begin(115200);   // Start serial communication
  delay(1000);            // Wait for a second

  // Connect to Wi-Fi
  Serial.print("Connecting to WiFi");
  WiFi.begin(ssid, password);          // Start Wi-Fi connection
  while (WiFi.status() != WL_CONNECTED) { // Wait until connected
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());      // Print ESP32 IP address

  // Start TCP server
  server.begin();
  Serial.println("TCP server started on port 8888");

  // Start DHT sensor
  dht.begin();
  delay(2000); // Let the sensor stabilize
}

void loop() {
  // Check if a client (phone/computer) has connected
  WiFiClient client = server.available();

  if (client) {
    Serial.println("Client connected");

    // Keep checking while client is connected
    while (client.connected()) {
      if (client.available()) {  // If client sent some data
        String request = client.readStringUntil('\r'); // Read data until carriage return
        client.flush(); // Clear extra data

        Serial.print("Received: ");
        Serial.println(request);

        // If client asked for humidity data
        if (request.indexOf("/humidity") != -1) {
          float h = dht.readHumidity();      // Read humidity
          float t = dht.readTemperature();   // Read temperature

          // Check if reading failed
          if (isnan(h) || isnan(t)) {
            client.println("Error reading from DHT sensor");
          } else {
            // Send temperature and humidity back to the client
            client.printf("Temperature: %.2f°C\nHumidity: %.2f%%\n", t, h);
          }
        } else {
          // If request is not recognized
          client.println("Invalid request. Try /humidity");
        }

        client.stop(); // Close connection with client
        Serial.println("Client disconnected\n");
      }
    }
  }
}

(TCP OG)

#include <WiFi.h> 
#include <WiFiClient.h> 
#include <DHT.h> 
const char* ssid = "IOT 1"; 
const char* password = "12345678"; 
#define DHT_PIN 32 // Try GPIO 4 or 5 if 32 fails 
#define DHT_TYPE DHT11 
DHT dht(DHT_PIN, DHT_TYPE); 
WiFiServer server(8888); 
void setup() { 
Serial.begin(115200); 
delay(1000); 
Serial.print("Connecting to WiFi"); 
WiFi.begin(ssid, password); 
while (WiFi.status() != WL_CONNECTED) { 
delay(500); 
Serial.print("."); 
} 
Serial.println("\nConnected to WiFi"); 
Serial.print("ESP32 IP Address: "); 
Serial.println(WiFi.localIP());  
server.begin(); 
Serial.println("TCP Server started on port 8888"); 
dht.begin(); 
delay(2000); // Give sensor time to stabilize 
} 
void loop() { 
WiFiClient client = server.available(); 
if (client) { Serial.println(" New TCP client connected"); 
while (client.connected()) { 
if (client.available()) { 
String request = client.readStringUntil('\r'); 
client.flush(); 
Serial.print(" Request: "); 
Serial.println(request); 
if (request.indexOf("/humidity") != -1) { 
float humidity = dht.readHumidity(); 
float temperature = dht.readTemperature(); 
if (isnan(humidity) || isnan(temperature)) { 
Serial.println("Failed to read from DHT sensor"); 
client.println("Failed to read from DHT sensor"); 
} else { 
Serial.printf("Humidity: %.2f%% Temperature: %.2f°C\n", humidity, temperature); 
client.printf("Humidity: %.2f%% Temperature: %.2f°C\n", humidity, temperature); 
} 
} else { 
client.println("Invalid request. Use '/humidity'");
} 
client.stop(); 
Serial.println("Client disconnected\n"); 
} 
} 
} 
}

Prog 8) UDP

#include <WiFi.h>       // For Wi-Fi connection
#include <WiFiUdp.h>    // For UDP communication
#include <DHT.h>        // For DHT sensor

// Wi-Fi credentials
const char* ssid = "IOT 1";         // Replace with your Wi-Fi name
const char* password = "12345678"; // Replace with your Wi-Fi password

// DHT sensor configuration
#define DHT_PIN 32       // GPIO pin where DHT11 is connected
#define DHT_TYPE DHT11   // We are using DHT11
DHT dht(DHT_PIN, DHT_TYPE); // Create DHT object

// UDP configuration
WiFiUDP udp;             // Create UDP object
#define UDP_PORT 5000    // Port number to listen on for incoming UDP packets

void setup() {
  Serial.begin(115200);  // Start Serial monitor

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP()); // Show ESP32's IP

  // Start listening for UDP packets on the specified port
  udp.begin(UDP_PORT);

  // Start the DHT sensor
  dht.begin();
  delay(2000); // Wait for the sensor to stabilize
}

void loop() {
  // Read humidity and temperature from DHT11
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  // If reading failed, show error and skip rest
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor");
    return;
  }

  // Check if a UDP packet was received
  int packetSize = udp.parsePacket();
  if (packetSize) {
    char packet[255];
    udp.read(packet, packetSize);     // Read packet content
    packet[packetSize] = '\0';        // Add null terminator to make it a valid string

    Serial.print("Received UDP: ");
    Serial.println(packet);           // Print received command

    // If the command is "get_humidity", send sensor data
    if (String(packet) == "get_humidity") {
      udp.beginPacket(udp.remoteIP(), udp.remotePort()); // Prepare to send reply
      udp.printf("Temp: %.1f°C, Humidity: %.1f%%", t, h); // Send formatted temperature & humidity
      udp.endPacket();                                   // Send packet
      Serial.println("Data sent.");
    } else {
      // If wrong command, send back help message
      udp.beginPacket(udp.remoteIP(), udp.remotePort());
      udp.println("Invalid command. Use 'get_humidity'");
      udp.endPacket();
    }
  }

  delay(2000); // Wait 2 seconds before next reading
}

(UDP OG)

#include <WiFi.h> 
#include <WiFiUdp.h> 
#include <DHT.h> 
const char* ssid = "IOT 1"; 
const char* password = "12345678"; 
#define DHT_PIN 32 
#define DHT_TYPE DHT11 
DHT dht(DHT_PIN, DHT_TYPE); 
WiFiUDP udp; 
#define UDP_PORT 5000 
void setup() { 
Serial.begin(115200); 
delay(1000); 
Serial.println("Starting ESP32 DHT + UDP Server");
 WiFi.begin(ssid, password); 
Serial.print("Connecting to WiFi"); 
int attempts = 0; 
while (WiFi.status() != WL_CONNECTED && attempts < 20) { 
delay(500); 
Serial.print("."); 
attempts++; 
} 
if (WiFi.status() != WL_CONNECTED) { 
Serial.println("\nFailed to connect to WiFi. Restarting..."); 
ESP.restart(); 
} 
Serial.println("\nConnected to WiFi"); 
Serial.print("ESP32 IP Address: "); 
Serial.println(WiFi.localIP()); 
udp.begin(UDP_PORT); 
Serial.printf("UDP server started on port %d\n", UDP_PORT); 
dht.begin(); 
delay(2000); 
} 
void loop() { 
float humidity = dht.readHumidity(); 
float temperature = dht.readTemperature(); 
if (isnan(humidity) || isnan(temperature)) { 
Serial.println(" Failed to read from DHT sensor!"); 
} 
else { 
Serial.printf(" Humidity: %.2f%% Temperature: %.2f°C\n", humidity, temperature); 
} 
int packetSize = udp.parsePacket(); 
if (packetSize) { 
Serial.println("UDP packet received!"); 
char packetData[packetSize + 1]; 
udp.read(packetData, packetSize); 
packetData[packetSize] = '\0'; 
String request = String(packetData); 
Serial.print(" Received UDP request: "); 
Serial.println(request); 
if (request == "get_humidity") { 
udp.beginPacket(udp.remoteIP(), udp.remotePort()); 
udp.printf("Humidity: %.2f%% Temperature: %.2f°C", humidity, temperature); 
udp.endPacket(); 
Serial.println("Sent humidity and temperature via UDP."); 
} 
else { 
udp.beginPacket(udp.remoteIP(), udp.remotePort()); 
udp.println("Invalid command. Use 'get_humidity'"); 
udp.endPacket(); 
Serial.println("Sent error response via UDP."); 
} 
} 
delay(2000);}



