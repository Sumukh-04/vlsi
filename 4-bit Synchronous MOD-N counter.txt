# 4-bit Synchronous MOD-N counter with Asynchronous reset:

module modn_counter #(
 parameter MODULO = 10,
 parameter WIDTH = $clog2(MODULO)
)(
 input wire clk,
 input wire rst,
 input wire en,
 output reg [WIDTH-1:0] count
);
 always @(posedge clk or posedge rst) begin
 	if (rst)
 		count <= 0;
 	else if (en) begin
 		if (count == MODULO - 1)
 			count <= 0;
 		else
 			count <= count + 1;
 	end
     end
endmodule

# Test Bench Code

module tb_modn_counter;
 reg clk, rst, en;
 wire [3:0] count;
 modn_counter #(.MODULO(10)) uut (
 .clk(clk),
 .rst(rst),
 .en(en),
 .count(count)
 );
    always #5 clk = ~clk;
    initial begin
 	clk = 0; rst = 1; en = 0;
 	#10 rst = 0; en = 1;
 	#100 $finish;
    end
    initial begin
 	$monitor("Time: %t | Count: %d", $time, count);
    end
endmodule











